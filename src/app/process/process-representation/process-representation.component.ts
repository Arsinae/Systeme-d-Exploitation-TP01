import { Component, OnInit, Input } from '@angular/core';
import { Process, Instruction } from './../process';
import { PAPSSchedule } from '../schedule/paps';
import { PCASchedule } from '../schedule/pca';
import { PPSchedule } from '../schedule/pp';
import { Schedule } from '../schedule/schedule';

@Component({
  selector: 'app-process-representation',
  templateUrl: './process-representation.component.html',
  styleUrls: ['./process-representation.component.scss']
})
export class ProcessRepresentationComponent implements OnInit {

  @Input() processes: Array<Process> = [];

  public processRepresentation: Array<{current: {processId: number, instructionId: number}, processState: Array<string>}> = [];
  public schedule: Schedule;
  public displayIndex = 1;
  public recentProcesses: Array<Process> = [];

  constructor() { }

  ngOnInit() {
  }

  resetDisplay() {
    this.displayIndex = 1;
    this.recentProcesses = this.processes.slice(0);
  }

  managePAPS() {
    this.resetDisplay();
    this.schedule = new PAPSSchedule();
    this.processRepresentation = this.schedule.manageProcess(this.recentProcesses);
  }

  managePCA() {
    this.resetDisplay();
    this.schedule = new PCASchedule();
    this.processRepresentation = this.schedule.manageProcess(this.recentProcesses);
  }

  managePP() {
    this.resetDisplay();
    this.schedule = new PPSchedule();
    this.processRepresentation = this.schedule.manageProcess(this.recentProcesses);
  }

  getMaximumInstruction() {
    let max = 0;
    for (const process of this.recentProcesses) {
      if (process.instructions.length > max) {
        max = process.instructions.length;
      }
    }
    return Array.from({length: max}).map((x, index) => index);
  }

  changeDisplayIndex(change) {
    if (this.displayIndex + change > 0 && this.displayIndex + change <= this.processRepresentation.length) {
      this.displayIndex += change;
    }
  }

  getInstructionStateClass(processState, instructionId) {
    if (processState === 'running') {
      if (instructionId === this.processRepresentation[this.displayIndex].current.instructionId) {
        return 'runningInstruction';
      } else {
        return 'runningProcess';
      }
    } else {
      return processState;
    }
  }

  getInstructionStateText(processState, instructionId) {
    if (processState === 'running') {
      if (instructionId === this.processRepresentation[this.displayIndex].current.instructionId) {
        return 'Instruction en cours';
      } else {
        return 'Processus en cours';
      }
    } else if (processState === 'waiting') {
      return 'Processus en attente';
    } else if (processState === 'ended') {
      return 'Processus terminé';
    } else if (processState === 'out') {
      return 'Processus non commencé';
    }
  }
}
